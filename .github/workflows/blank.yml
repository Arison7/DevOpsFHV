name: Build Spring Boot BootJar (Containerized)

on:
  push:
    branches: [master]

jobs:
  analyze:
    name: Build and analyze
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Reset workspace permissions
        run: sudo chown -R $USER:$USER ${{ github.workspace }} || true

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Clean project (Gradle container)
        run: |
          docker run --rm \
            -u $(id -u):$(id -g) \
            -v "${{ github.workspace }}":/home/gradle/project \
            -v ~/.gradle/caches:/home/gradle/.gradle/caches \
            -w /home/gradle/project \
            gradle:jdk17 \
            ./gradlew clean --no-daemon

      - name: Build and test (Gradle container)
        run: |
          docker run --rm \
            -u $(id -u):$(id -g) \
            -v "${{ github.workspace }}":/home/gradle/project \
            -v ~/.gradle/caches:/home/gradle/.gradle/caches \
            -w /home/gradle/project \
            gradle:jdk17 \
            ./gradlew build jacocoTestReport --no-daemon

      - name: Run SonarQube analysis (Sonar Scanner container)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          docker run --rm \
            -u 0 \
            -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
            -e SONAR_LOGIN="${SONAR_TOKEN}" \
            -v "${{ github.workspace }}":/usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectBaseDir=/usr/src \
            -Dsonar.java.binaries=/usr/src/build/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=/usr/src/coverage-reports/jacoco/test/jacocoTestReport.xml

  start:
    runs-on: self-hosted
    needs: analyze
    steps:
      - uses: actions/checkout@v4

      - name: Build bootJar (Gradle container)
        run: |
          docker run --rm \
            -u $(id -u):$(id -g) \
            -v "${{ github.workspace }}":/home/gradle/project \
            -v ~/.gradle/caches:/home/gradle/.gradle/caches \
            -w /home/gradle/project \
            gradle:jdk17 \
            ./gradlew bootJar --no-daemon

      - name: Build Docker image
        run: docker build -t fhvdevops:latest -f Dockerfile-build .

  stop:
    runs-on: self-hosted
    needs: start
    steps:
      - run: docker stop fhvdevops || true
      - run: docker rm fhvdevops || true

  cleanup:
    runs-on: self-hosted
    needs: stop
    steps:
      - run: |
          docker run -d \
            --name fhvdevops \
            --restart unless-stopped \
            -p 8080:8080 \
            --network bridge \
            fhvdevops:latest

  test:
    runs-on: self-hosted
    needs: cleanup
    steps:
      - run: |
          echo 'Checking API endpoint...'
          response=$(curl -s -o /dev/null -w "%{http_code}" http://10.0.40.192:8080/test)
          if [ "$response" -eq 200 ]; then
            echo 'API returned success'
          else
            echo "API returned status $response"
            exit 1
          fi

  publish:
    runs-on: self-hosted
    needs: test
    if: success()
    steps:
      - run: |
          docker tag fhvdevops:latest 10.0.40.193:5000/fhvdevops:team12
          docker push 10.0.40.193:5000/fhvdevops:team12
